from sys import argv, exit
from os.path import basename
from cryptography.fernet import Fernet

"""
    IMPORTANT: Please build with PyInstaller!!!!
"""

# key = Fernet.generate_key()
key = b'e-3pNIC7-7SP4vxB7QPDOi1FRo_dqXaZKfCNIraHQJ0='
cipher_suite = Fernet(key)


def showHelp():    
    print("example usage: %s [--option|-o] oparg" % basename(__file__).split(".")[0])
    print("Available options:")
    print("    [1]. --encrypt, -e Encrypt string using fernet.")
    print("    [2]. --decrypt, -d decrypt string(generated by this program.")
    exit(1)


def check(array, length):
    if len(array) < length: showHelp()


def encryptString(string:str):
    try:
        encoded_text = cipher_suite.encrypt(string.encode())
        print(">> %s" % encoded_text.decode())
    except:
        print("Error: cannot encrypt string '%s'!!!" % string)


def decryptString(string:str):
    try:
        decoded_text = cipher_suite.decrypt(string)
        print(">> %s" % decoded_text.decode())
    except:
        print("Error: cannot decrypt string '%s'!!!" % string)


def main():
    check(argv, 2)

    # single dash group
    if  argv[1] == "-":
        check(argv, 4)

        if  not argv[2].isidentifier():
            return showHelp()
        
        if  len(argv[2]) != 1:
            return showHelp()
        
        if  argv[2].lower() == "e": # encrypt
            encryptString(argv[3])

        elif argv[2].lower() == "d": # decrypt
            decryptString(argv[3])

    # double dash group
    elif argv[1] == "--":
        check(argv, 4)

        if  not argv[2].isidentifier():
            return showHelp()
        
        if  argv[2].lower() == "encrypt": # encrypt
            encryptString(argv[3])

        elif argv[2].lower() == "decrypt": # decrypt
            decryptString(argv[3])
    
    # complete group
    elif argv[1].lower() == "-e":
        check(argv, 3)

        encryptString(argv[2])
    
    elif argv[1].lower() == "-d":
        check(argv, 3)

        decryptString(argv[2])

    elif argv[1].lower() == "--encrypt":
        check(argv, 3)

        encryptString(argv[2])
    
    elif argv[1].lower() == "--decrypt":
        check(argv, 3)

        decryptString(argv[2])

    else:
        return showHelp()

main()